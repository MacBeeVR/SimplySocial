trigger:
  branches:
    include:
      - main
  paths:
    exclude:
      - azure-pipelines.yml

pool:
  vmImage: 'ubuntu-latest'

variables:
  SQLScriptName: DbMigrate.sql

stages:
- stage: Build
  displayName: 'Build App'

  variables:
    BuildConfiguration: Release
    NUGET_PACKAGES: $(Build.SourcesDirectory)/.nuget/packages
    SQLArtifactDir: $(Build.ArtifactStagingDirectory)/SQL
    BuildProject: '$(Build.SourcesDirectory)/src/Server/SimplySocial.Server.csproj'

  jobs: 
  - job: Build
    steps:
    - task: Cache@2
      inputs:
        key: 'v1 | nuget | "$(Agent.OS)"'
        path: $(NUGET_PACKAGES)
        cacheHitVar: CACHE_RESTORED

    - task: Cache@2
      inputs:
        key: 'v1 | nuget | "$(Agent.OS)"|assets'
        path: $(Build.SourcesDirectory)/src/Server/obj
        cacheHitVar: CACHE_RESTORED

    - task: DotNetCoreCLI@2
      displayName: Restore
      condition: ne(variables.CACHE_RESTORED, 'true')
      inputs:
        command: restore
        projects: $(BuildProject)

    - task: DotNetCoreCLI@2
      displayName: Build
      inputs:
        projects: $(BuildProject)
        arguments: --configuration $(BuildConfiguration)

  - job: Prepare_App
    dependsOn: Build
    displayName: 'Publish Build Artifact'
    steps:
      - task: DotNetCoreCLI@2
        displayName: Publish
        inputs:
          command: publish
          zipAfterPublish: true
          #if publishWebProjects is true, the projects input is skipped.
          publishWebProjects: false
          projects: '$(BuildProject)'
          arguments: '--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)/SimplySocialApp'

      - task: PublishPipelineArtifact@1
        displayName: 'Publish Build Artifact'
        condition: succeededOrFailed()
        inputs:
          artifactName: SimplySocialApp
          targetPath: '$(Build.ArtifactStagingDirectory)/SimplySocialApp'

  - job: Prepare_SQL
    dependsOn: Build
    displayName: 'Publish SQL Artifact'
    steps:
      - script: |
          dotnet tool install -g dotnet-ef
          export PATH=$PATH:$HOME/.dotnet/tools
          . ~/.bashrc
          . ./scripts/generate_sql_script.sh
        displayName: 'Create DB Migration Script'
        env:
          SCRIPT_NAME: $(SQLScriptName)
          PROJECT_PATH: $(BuildProject)
          OUTPUT_DIR: $(SQLArtifactDir)
        
      - task: PublishPipelineArtifact@1
        displayName: 'Publish SQL Artifact'
        inputs:
          artifactName: SQLScript
          targetPath: '$(SQLArtifactDir)/$(SQLScriptName)'

- stage: Deploy
  displayName: Deploy

  jobs:
    - job: DeployApp
      displayName: 'Deploy App'
      steps:
        - task: DownloadPipelineArtifact@2
          displayName: 'Download Artifact'
          inputs:
            artifactName: SimplySocialApp
            path: '$(Pipeline.Workspace)/SimplySocialApp'
        
        - task: AzureWebApp@1
          displayName: 'Deploy to App Service'
          inputs:
            appName: sealsdev
            appType: webAppLinux
            azureSubscription: $(AzureSubscription)
            package: '$(Pipeline.Workspace)/SimplySocialApp/Server.zip'
        

    - job: DeployDatabase
      displayName: 'Deploy Database'

      pool:
        vmImage: 'windows-latest'

      steps:
        - task: DownloadPipelineArtifact@2
          displayName: 'Download SQL Script'
          inputs:
            artifactName: SQLScript
            path: '$(Pipeline.Workspace)\SQL'
        
        - task: SqlDacpacDeploymentOnMachineGroup@0
          inputs:
            TaskType: 'sqlQuery'
            ExclusiveLock: true
            AppLockName: '$(DBLock)'
            ServerName: '$(DBServer)'
            DatabaseName: '$(DBName)'
            SqlUsername: '$(DBUsername)'
            SqlPassword: '$(DBPassword)'
            SqlFile: '$(Pipeline.Workspace)\SQL\$(SQLScriptName)'
            AuthScheme: 'sqlServerAuthentication'