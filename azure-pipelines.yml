trigger:
- main

stages:
- stage: Build
  displayName: 'Build App'

  pool:
    vmImage: 'ubuntu-latest'

  variables:
    BuildConfiguration: 'Release'
    BuildProject: '**/SimplySocial.Server.csproj'

  jobs: 
  - job: Build
    steps:
    - task: UseDotNet@2
      displayName: 'Use .Net 5 SDK'
      inputs:
        version: 5.0.x
        packageType: sdk
        includePreviewVersions: false
        installationPath: $(Agent.ToolsDirectory)/dotnet
    - task: DotNetCoreCLI@2
      displayName: 'Use dotnet ef'
      inputs:
        command: custom
        custom: 'tool '
        arguments: install --global dotnet-ef
    - task: DotNetCoreCLI@2
      displayName: Restore
      inputs:
        command: restore
        projects: $(BuildProject)
    - task: DotNetCoreCLI@2
      displayName: Build
      inputs:
        projects: $(BuildProject)
        arguments: --configuration $(BuildConfiguration)
    - task: DotNetCoreCLI@2
      displayName: 'Create Identity SQL'
      inputs:
        command: custom
        custom: 'ef '
        arguments: migrations script --output $(Build.SourcesDirectory)/SQL/identity.sql --idempotent --project $(Build.SourcesDirectory)/src/Server/SimplySocial.Server.csproj --context IdentityContext
    - task: DotNetCoreCLI@2
      displayName: Publish
      inputs:
        command: publish
        zipAfterPublish: true
        publishWebProjects: true
        projects: '$(BuildProject)'
        arguments: '--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)'
    - task: PublishPipelineArtifact@1
      displayName: 'Publish Artifact'
      condition: succeededOrFailed()
      inputs:
        artifactName: SimplySocialApp
        targetPath: '$(Build.ArtifactStagingDirectory)'
    - task: PublishPipelineArtifact@1
      displayName: 'Publish Artifact: SQL Scripts'
      inputs:
        artifactName: SQLScripts
        targetPath: $(Build.SourcesDirectory)/SQL

- stage: Deploy
  displayName: Deploy

  pool:
    vmImageName: 'windows-latest'

  jobs:
    - job: DeployApp
      displayName: 'Deploy App'
      steps:
        - task: DownloadPipelineArtifact@2
          displayName: 'Download Artifact'
          inputs:
            artifactName: SimplySocialApp
            path: $(Pipeline.Workspace)/SimplySocialApp
            itemPattern: '**/Server.zip'
        
        - task: AzureWebApp@1
          displayName: 'Deploy to App Service'
          inputs:
            appName: sealsdev
            appType: webAppLinux
            azureSubscription: $(AzureSubscription)
            package: '$(Pipeline.Workspace)/SealsDevApp/Server.zip'

    - job: DeployDatabase
      displayName: 'Deploy Database'
      steps:
        - task: DownloadPipelineArtifact@2
          displayName: 'Download Artifact: SQL Scripts'
          inputs:
            artifactName: SQLScripts
            path: $(Pipeline.Workspace)/SQL
        
        - task: SqlDacpacDeploymentOnMachineGroup@0
          inputs:
            TaskType: 'sqlQuery'
            ExclusiveLock: true
            ExecuteInTransaction: true
            AppLockName: '$(DBLock)'
            ServerName: '$(DBServer)'
            DatabaseName: '$(DBName)'
            SqlUsername: '$(DBUsername)'
            SqlPassword: '$(DBPassword)'
            SqlFile: '$(Pipeline.Workspace)/SQL'
            AuthScheme: 'sqlServerAuthentication'